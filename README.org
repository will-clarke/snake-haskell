* Snake written in Haskell

No idea if this will ever work... at the moment we've got some basic stuff showing on a terminal :|

*** How to run

    - Make sure you've got [[https://www.haskellstack.org/][stack]] installed. Then:
#+BEGIN_SRC sh
git clone https://github.com/will-clarke/snake-haskell
cd snake-haskell
stack run
#+END_SRC    


Some notes about how I'm implementing this:
- Worth having two typeclasses - ~Tickable~ & ~Drawable~?

#+BEGIN_SRC haskell
class Drawable a where
    coords :: [Coordinates]
    widget :: Char
  
class Tickable a where
    tick :: a - > a
#+END_SRC
No idea if this is a good idea... We'll find out I guess... ¯\_(ツ)_/¯

- [ ] parsing -- some DSL for styling / add a map
- [ ] Find out how to get screen dimensions from Brick. This could be tricky / monad-y
- [ ] (related to below): allow command line args to toggle between simple / complex graphics
- [ ] changing background colours depending on the level
- [X] Add attributes to make it pretty
- [ ] Colour in the snake
- [ ] Colour in the Food
- [ ] Actually make pretty attributes pretty
- [ ] Start snake moving left to right or something
- [ ] loading screen!
- [ ] implement pausing / resuming
- [ ] Make the game faster as you eat more fruit
- [ ] make it so you can't move further from the boundary
- [ ] add an endgame screen
- [ ] add a pre-game screen
- [ ] high scores stored locally?
- [ ] high scores stored on a server somewhere?????
- [ ] (prerequisite of below): store a continually increasing integer - the "tick" of the game
- [ ] record a list of all the keystrokes??? We could even replay this later on....
- [ ] backwards mode: keys do the opposite of what you expect (/ something totally random)
- [X] move stdgen into food
- [X] rename model
- [X] remove keypress
- [X] Don't allow snakes to turn on 180 degrees
- [X] Reseed food after it's eaten
- [X] Allow Food to be eatable
- [X] Make food increment the score
- [X] command line -- pass in initial seed. Optparse-applicative. Maybe different game modes (eg. just left-right)


Next projects ideas:

- Parse "One hundred and twenty eight" into 128
- Parse cron
- Invent regular expression language
- Invent L-System turtle thing
